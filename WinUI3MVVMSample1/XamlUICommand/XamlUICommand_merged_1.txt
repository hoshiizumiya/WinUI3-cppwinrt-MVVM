// === Code Bundle ===
// Root: G:\WinUIProg\mvvm-cppwinrt-winui3\WinUI3MVVMSample1\XamlUICommand
// Files (3):
//   1. NodeGraphPage.idl
//   2. NodeGraphPage.xaml.cpp
//   3. NodeGraphPage.xaml.h
// ====================

// ================================================================================
// FILE: NodeGraphPage.idl
// ================================================================================

namespace XamlUICommand
{
    [default_interface]
    runtimeclass NodeGraphPage : Microsoft.UI.Xaml.Controls.Page
    {
        NodeGraphPage();
    }
}

// ================================================================================
// FILE: NodeGraphPage.xaml.cpp
// ================================================================================

#include "pch.h"
#include "NodeGraphPage.xaml.h"
#if __has_include("NodeGraphPage.g.cpp")
#include "NodeGraphPage.g.cpp"
#endif

#include "Controls/NodeGraphPanel.h"
#include "Controls/NodeViewModel.h"
#include "Controls/EdgeViewModel.h"
#include "Controls/NodeInvokedEventArgs.h"

using namespace winrt;
using namespace Microsoft::UI::Xaml;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;

namespace winrt::XamlUICommand::implementation
{
    NodeGraphPage::NodeGraphPage()
    {
        InitializeComponent();
        BuildSample();
    }

    void NodeGraphPage::BuildSample()
    {
        // 准备数据源
        auto nodes = single_threaded_observable_vector<XamlUICommand::NodeViewModel>();
        auto edges = single_threaded_observable_vector<XamlUICommand::EdgeViewModel>();
        Graph().Nodes(nodes);
        Graph().Edges(edges);

        // 默认从 Meta["Name"] 取标签、Meta["Desc"] 做 tooltip（也可直接写在 XAML 属性）
        Graph().DefaultLabelMetaKey(L"Name");
        Graph().DefaultTooltipMetaKey(L"Desc");

        // 三个节点（两个圆，一个圆角矩形）
        auto n1 = Graph().AddNode(1, L"A", Point{ 100,100 });
        n1.Size(Size{ 64,64 });
        n1.Meta().Insert(L"Name", box_value(L"Alpha"));
        n1.Meta().Insert(L"Desc", box_value(L"First node"));

        auto n2 = Graph().AddNode(2, L"B", Point{ 320,160 });
        n2.Size(Size{ 64,64 });
        n2.Meta().Insert(L"Name", box_value(L"Beta"));
        n2.Meta().Insert(L"Desc", box_value(L"Second node"));

        auto n3 = Graph().AddNode(3, L"C", Point{ 200,260 });
        n3.Shape(XamlUICommand::NodeShape::RoundedRect);
        n3.Size(Size{ 120,64 });
        n3.Meta().Insert(L"Name", box_value(L"Gamma (rect)"));
        n3.Meta().Insert(L"Desc", box_value(L"A longer description here"));

        // 连线
        Graph().AddEdge(1, 2, L"e12");
        Graph().AddEdge(2, 3, L"e23");
        Graph().AddEdge(1, 3, L"e13");

        // 订阅 NodeInvoked 事件（点击节点时触发）
        Graph().NodeInvoked([this](IInspectable const&, XamlUICommand::NodeInvokedEventArgs const& e)
            {
                // 示例：把被点中的节点置为选中（也可以在控件内部做，这里只是演示）
                auto node = e.Node();
                node.IsSelected(true);
            });
    }
}

// ================================================================================
// FILE: NodeGraphPage.xaml.h
// ================================================================================

#pragma once
#include "NodeGraphPage.g.h"

namespace winrt::XamlUICommand::implementation
{
    struct NodeGraphPage : NodeGraphPageT<NodeGraphPage>
    {
        NodeGraphPage();

    private:
        void BuildSample();
    };
}

namespace winrt::XamlUICommand::factory_implementation
{
    struct NodeGraphPage : NodeGraphPageT<NodeGraphPage, implementation::NodeGraphPage> {};
}

